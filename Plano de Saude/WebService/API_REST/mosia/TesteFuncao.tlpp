#include "totvs.ch"

/* #include "tlpp-core.th"
#include "tlpp-rest.th"

@Get("/documentation/setResponse")
function u_fSetResponse()
    local cResponse := ""
    local lRet      := ""

    cResponse := '{"setResponse": "metodo setResponse executado com sucesso"}'
return oRest:setResponse(cResponse) */

User Function restExecute()
    Local oRestClient := FWRest():New("https://www.caberj.com.br/apirestdesenv")
    Local aHeader := {"tenantId: 01,01"}

    // inclui o campo Authorization no formato <usuario>:<senha> na base64
    Aadd(aHeader, "Authorization: Basic " + Encode64("restuser:P@ssw0rd2023"))

    //Roda a função que está sendo testada
    u_getRedeCredenciada()
Return oJson

Static Function SulliTeste01()
    Local cFile := '\TesteJson.json'
    Local cJsonStr,oJson
    Local nId, cNome, lDepend, aAlerg
    Local oOutros, cTipoS, lEleitor, lReserv

    // Le a string JSON do arquivo do disco 
    cJsonStr := readfile(cFile)

    // Cria o objeto JSON e popula ele a partir da string
    oJson := JSonObject():New()
    cErr  := oJSon:fromJson(cJsonStr)

    If !empty(cErr)
        MsgStop(cErr,"JSON PARSE ERROR")
        Return
    Endif

    // Agora vamos ler as propriedades com GetJSonObject()

    nId := oJson:GetJSonObject('Id')
    cNome := oJson:GetJSonObject('Nome')
    lDepend := oJson:GetJSonObject('Dependentes')

    // Aqui será retornado um array de strings
    aAlerg := oJson:GetJSonObject('Alergias')
    cAlerg1 := aAlerg[1]
    cAlerg2 := aAlerg[2]

    // Objeto dentro de uma propriedade
    oOutros := oJson:GetJSonObject('Outros')

    cTipoS := oOutros:GetJSonObject('Sangue')
    lEleitor := oOutros:GetJSonObject('Eleitor')
    lReserv := oOutros:GetJSonObject('Reservista')

    //Retorna propriedades
    If GetRemoteType(@cLib) 
        MsgAlert('Retorno das variáveis retornadas do json: ' + cNome + ' ' + cAlerg1 + ' ' + cAlerg2 + ' ' + cTipoS)
    else 
        FWLogMsg(;
            "INFO",;    //cSeverity      - Informe a severidade da mensagem de log. As opções possíveis são: INFO, WARN, ERROR, FATAL, DEBUG
            ,;          //cTransactionId - Informe o Id de identificação da transação para operações correlatas. Informe "LAST" para o sistema assumir o mesmo id anterior
            "ZQOut",; //cGroup         - Informe o Id do agrupador de mensagem de Log
            ,;          //cCategory      - Informe o Id da categoria da mensagem
            ,;          //cStep          - Informe o Id do passo da mensagem
            ,;          //cMsgId         - Informe o Id do código da mensagem
            ('Retorno das variáveis retornadas do json: ' + cNome + ' ' + cAlerg1 + ' ' + cAlerg2 + ' ' + cTipoS),;    //cMessage       - Informe a mensagem de log. Limitada à 10K
            ,;          //nMensure       - Informe a uma unidade de medida da mensagem
            ,;          //nElapseTime    - Informe o tempo decorrido da transação
            ;           //aMessage       - Informe a mensagem de log em formato de Array - Ex: { {"Chave" ,"Valor"} }
        ) 
    Endif
    QOut(oJson:toJson())
    // Descarta o objeto 
    //FreeObj(oJson)
Return oJson

STATIC Function ReadFile(cFile)
    Local cBuffer := ''
    Local nH , nTam
    nH := Fopen(cFile)
    IF nH != -1
        nTam := fSeek(nH,0,2)
        fSeek(nH,0)
        cBuffer := space(nTam)
        fRead(nH,@cBuffer,nTam)
        fClose(nH)
    Else
        MsgStop("Falha na abertura do arquivo ["+cFile+"]","FERROR "+cValToChar(Ferror()))
    Endif

    If GetRemoteType(@cLib)  // -> 1 se executar TOTVS SmartClient em versão Windows
        QOut('Versão do Smartclient: ' + cLib) // -> "QT-4.5.2 WIN" -> Retorno do SO implementado em versões superiores a 120420A
        MsgAlert('MsgAlert' + cBuffer)
        QOut('QOut' + cBuffer)
        QOut('zQOut' + cBuffer)
    else 
        QOut(cBuffer)
    Endif
    
Return cBuffer
