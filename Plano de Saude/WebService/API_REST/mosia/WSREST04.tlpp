#include "tlpp-core.th"
#include "tlpp-rest.th"

//Retorna rede credenciada em json
@get("mobile/redecredenciada")
User function getRedeCredenciada()
  Local nRegs := 0
  Local oJsonRet  := NIL         // Recebe o JSON de Saida
  Local aJson  := {} //Array json
  local cMunicipio := ''
  local cWhere := ''
  local jPath := jsonObject():New()
  local cQuery := ''
  local cAlias := 'BXTEMP'
  //trata a vari·vio de entrada
  jPath := oRest:getPathParamsRequest()
  if (jPath <> Nil )
    cMunicipio := jPath[ 'municipio' ]
  endif

  QOUT( cMunicipio )

  cQuery := "Select BB8.BB8_MUN NOME_MUNICIPIO from BB8010 BB8 where 1=1"
  If cMunicipio != nil
    cQuery += " AND Upper(TRIM(BB8.BB8_MUN)) = '" + upper(cMunicipio) + "' "
  else 
    QOUT( "N„o veio o municipio" )
  End

  //Abre conex„o com o banco de dados caso esteja rodando via job
  TCLink()

  DBUseArea(.T., "TOPCONN", TCGenQry(NIL,NIL,cQuery), (cAlias) , .F., .T. )

  oJsonRet := JsonObject():new()
  //Enquanto houver registros
  While ! (cAlias)->(EoF())
    aAdd(aJson, JsonObject():new())
    nRegs := Len(aJson)
    /* aJson[nRegs]['OPERADORA']:=BXTEMP->OPERADORA
    aJson[nRegs]['TIPO']:=BXTEMP->TIPO
    aJson[nRegs]['ESPECIALIDADE']:=BXTEMP->ESPECIALIDADE
    aJson[nRegs]['CODRDA']:=BXTEMP->CODRDA
    aJson[nRegs]['NOME_RDA']:=BXTEMP->NOME_RDA
    aJson[nRegs]['RAZAO_SOCIAL_RDA']:=BXTEMP->RAZAO_SOCIAL_RDA
    aJson[nRegs]['CNPJ_CGC']:=BXTEMP->CNPJ_CGC
    aJson[nRegs]['TIPO_PESSOA']:=BXTEMP->TIPO_PESSOA */
    aJson[nRegs]['NOME_MUNICIPIO']:=(cAlias)->NOME_MUNICIPIO
    QOUT( 'NOME_MUNICIPIO ' + (cAlias)->NOME_MUNICIPIO )
    /* aJson[nRegs]['NOME_BAIRRO']:=BXTEMP->NOME_BAIRRO
    aJson[nRegs]['ENDERECO']:=BXTEMP->ENDERECO
    aJson[nRegs]['NUMERO']:=BXTEMP->NUMERO
    aJson[nRegs]['COMPLEMENTO']:=BXTEMP->COMPLEMENTO
    aJson[nRegs]['TELEFONES']:=BXTEMP->TELEFONES
    aJson[nRegs]['INCLUSAO']:=BXTEMP->INCLUSAO
    aJson[nRegs]['UF']:=BXTEMP->UF
    aJson[nRegs]['DDD']:=BXTEMP->DDD
    aJson[nRegs]['ORDEM']:=BXTEMP->ORDEM
    aJson[nRegs]['REDE']:=BXTEMP->REDE
    aJson[nRegs]['COD_PLANO']:=BXTEMP->COD_PLANO
    aJson[nRegs]['NOME_PLANO']:=BXTEMP->NOME_PLANO
    aJson[nRegs]['NUM_REG_ANS']:=BXTEMP->NUM_REG_ANS
    aJson[nRegs]['PRDATN']:=BXTEMP->PRDATN
    aJson[nRegs]['SECRES']:=BXTEMP->SECRES
    aJson[nRegs]['DVPRO']:=BXTEMP->DVPRO
    aJson[nRegs]['CODLOC']:=BXTEMP->CODLOC
    aJson[nRegs]['CODRED']:=BXTEMP->CODRED
    aJson[nRegs]['SEGMENT_REDE']:=BXTEMP->SEGMENT_REDE
    aJson[nRegs]['CODESP']:=BXTEMP->CODESP
    aJson[nRegs]['CODSUB']:=BXTEMP->CODSUB
    aJson[nRegs]['DESCRISUB']:=BXTEMP->DESCRISUB */
    (cAlias)->(DbSkip())
  EndDo
  (cAlias)->(DbCloseArea())
  oJsonRet:Set(aJson) //Atribui o array ao objeto Json na raiz

  TCUnlink()
return oRest:setResponse(oJsonRet)

/*------------------------------------------------------------------
Retorna dados de um usu√°rio existente
Par√¢metros via [raw body]
------------------------------------------------------------------*/
@get("apirestdesenv/crud/body")
static function getBodyUser()

  local cUser := ''
  local jBody := ''

  jBody := JsonObject():new()
  jBody:fromJson( oRest:GetBodyRequest() )

  if ( jBody <> Nil )
    cUser := jBody:GetJsonText("user")
  endif

  processGetUser( cUser )
return


/*------------------------------------------------------------------
Retorna dados de um usu√°rio existente
Par√¢metros via [querystring]
------------------------------------------------------------------*/
@Get("apirestdesenv/crud/query")
static function getQueryUser()
  local cUser   := ''
  local jQuery  := jsonObject():New()

  jQuery := oRest:getQueryRequest()

  if ( jQuery <> Nil )
    cUser := jQuery[ 'user' ]
  endif

  processGetUser( cUser )
return 


/*------------------------------------------------------------------
Retorna dados de um usu√°rio existente
Par√¢metros via [pathstring]
------------------------------------------------------------------*/
@Get("apirestdesenv/crud/path/:user")
static function getPathUser()
  local cUser := ''
  local jPath := jsonObject():New()

  jPath := oRest:getPathParamsRequest()

  if (jPath <> Nil )
    cUser := jPath[ 'user' ]
  endif

  processGetUser( cUser )
return 



// ------------------------------------------------------------------ //
// ------------------------------------------------------------------ //
static function processGetUser( cUser )

  local cReturn := ''
  local lOK     := .T.
  local cMsg    := ''
  local aUser   := {}
  local cID     := ''
  local cName   := ''
  local cNick   := ''

  // Valida campo chave de busca
    if ( cUser == Nil .or. empty(cUser) )
        cUser := ''
        lOK   := .F.
        cMsg  := 'invalid parameter: user'
    endif

  if ( lOK )
    aUser := sampleCRUDtlppRestgetUser( cUser )

    if ( len(aUser) == 4 )
      lOK   := .T.
      cMsg  := 'user found'
      cID   := aUser[1]
      cName := aUser[2]
      cNick := aUser[3]
      cUser := aUser[4]
    else
      lOK     := .F.
      cMsg    := 'user could not found'
    endif
  endif

  cReturn := '{ "SUCESS": "' + if(lOK,'yes','no') + '", "MESSAGE": "' + cMsg + '", "ID": "' + cID + '", "NAME": "' + cName + '", "NICK": "' + cNick + '", "USER": "' + cUser + '" }'

  oRest:setResponse( cReturn )
return

/* webservice para login pelo mobile Saude Mosia 
url: 
    https://www.caberj.com.br/apirestdesenv/login
Body:
{
  "login": "<login>",
  "senha": "<senha>"
}
Retorno: 
"usuarioLogado": {
    "permissoes": [Array-objetos],
    "login": "string",
    "chaveUnica": "string",
    "contato": {objeto},
    "esquemaCor": "String",
    "integracao": {objeto}
  },
  "beneficiarios": [
    {
      "chaveUnica": "string",
      "integracao": {objeto},
      "dadosPessoais": {objeto},
      "dadosDoContrato": {objeto},
      "dadosDoPlano": {objeto},
      "cartao": {objeto},
      "bloqueio": {objeto},
      "custom": {objeto}
    }
  ]
*/
//Esta URI est· configurada com o Public no appserver.ini do webservice rest para n„o exigir autenticaÁ„o
@post("/login")
user function restLogin()
  Local oRestClient := FWRest():New("https://10.19.1.10:9725/apirestdesenv/")
  Local aHeader := {"tenantId: 01,01"}
  Local oJson as json
  Local cErr, cToken, cChave, cExpiracao, cJson as CHARACTER
  Local oJsonRet as json

  oRestClient:setPath("api/oauth2/v1/token?grant_type=password&password=P@ssw0rd2023&username=restuser")

  // chamada da classe exemplo de REST com retorno de lista
  If oRestClient:Post(aHeader)
    QQOUT("GET - " + oRestClient:GetResult())
    //oRest:setResponse("GET - " + oRestClient:GetResult())
  Else
    QQOUT("GET - " + oRestClient:GetLastError())
  EndIf

  // Cria o objeto JSON e popula ele a partir do retorno
  oJson := JSonObject():New()
  cErr  := oJSon:fromJson(oRestClient:GetResult())
  If !empty(cErr)
    MsgStop(cErr,"JSON PARSE ERROR")
    QQOUT(cErr,"JSON PARSE ERROR")
    Return
  Endif

  // Agora vamos ler as propriedades com GetJSonObject()
  cToken := oJson:GetJSonObject('access_token')
  cChave := oJson:GetJSonObject('token_type')
  cExpiracao := oJson:GetJSonObject('expires_in')

  cJson := '{ '
  cJson += '  "auth": [{"chave":"'+cChave+'","token":"'+cToken+'","expiracao":'+str(cExpiracao)+'}] '
  cJson += ' }' 
  
  // Cria o objeto JSON e popula ele a partir do retorno
  oJsonRet := JSonObject():New()
  cErr  := oJSonRet:fromJson(cJson)
  If !empty(cErr)
    MsgStop(cErr,"JSON PARSE ERROR")
    QQOUT(cErr,"JSON PARSE ERROR")
    Return
  Endif
  // retorna o objeto JSON
  oRest:setResponse(oJsonRet) 
  QQOUT( "Resultado do Json", oJSonRet:toJson())

Return     

static function getBenefi(cUser, cPass)
  Local cRet as CHARACTER

  BeginSql Alias "tbUsuarios"
    SELECT BSW_CODUSR, BSW_NOMUSR, BSW_EMAIL, BSW_CODACE FROM %table:BSW% BSW
      WHERE 1 = 1
      AND BSW_FILIAL  = %xFilial:BSW%
      AND BSW_YCPF =  (%Exp:cUser%) 
      AND BSW_SENHA =  (%Exp:cPass%)
      AND D_E_L_E_T_ = ' '
  EndSql
  
  While ! tbUsuarios->(EoF())
      nRegs++
        
      tbUsuarios->(DbSkip())
  EndDo
  tbUsuarios->(DbCloseArea())
    
  MsgInfo("Foram processados "+cValToChar(nRegs)+" produtos.", "AtenÁ„o")
    
  RestArea(aArea)
return nRegs
